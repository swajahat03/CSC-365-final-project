import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

import java.util.Map;
import java.util.Scanner;
import java.util.LinkedHashMap;
import java.time.LocalDate;
import java.util.List;
import java.util.ArrayList;

public class InnReservations {
    private Connection conn;

    private static final int rs_width = 150;

    public InnReservations() {
        try  {
            conn = DriverManager.getConnection(System.getenv("JDBC_URL"),
                    System.getenv("JDBC_USER"),
                    System.getenv("JDBC_PW"));
        } catch (SQLException e) {
            System.err.println("SQLException: " + e.getMessage());
            System.out.println("Connection failed.");
        }
    }

    public static void main(String[] args) throws SQLException {
        boolean quit = false;

        InnReservations ir = new InnReservations();

        while (!quit) {
            String selection = getUserSelection();
            // get user selection from menu

            try {
                if (selection.toLowerCase().equals("rooms and rates") || selection.equals("1")) {
                    ir.fr1(); // fr1 done (Julian)
                } else if (selection.toLowerCase().equals("reservations") || selection.equals("2")) {
                    ir.fr2();
                } else if (selection.toLowerCase().equals("reservations change") || selection.equals("3")) {
                    ;
                } else if (selection.toLowerCase().equals("reservation cancellation") || selection.equals("4")) {
                    ;
                } else if (selection.toLowerCase().equals("detailed reservation information") || selection.equals("5")) {
                    ;
                } else if (selection.toLowerCase().equals("revenue") || selection.equals("6")) {
                    ;
                } else if (selection.toLowerCase().equals("exit") || selection.equals("7")) {
                    ir.fr2();
                    System.out.println("Thank you for using the Inn Reservation System. Goodbye.");
                    System.out.println("Thank you for using the Inn Reservation System. Goodbye.");
                    quit = true;
                } else {
                    System.out.println("Unknown selection. Please try again.");
                }
            } catch (SQLException e) {
                System.err.println("SQLException: " + e.getMessage());
            }
        }

        if (ir.conn != null) {
            ir.conn.close();
        }
    }

    public static void printMenu() {
        System.out.println("\nPlease select an option from below.");
    }

    public static String getUserSelection() {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Please select an option from below.");
        System.out.println("1. Rooms and Rates");
        System.out.println("2. Reservations");
        System.out.println("3. Reservations Change");
        System.out.println("4. Reservation Cancellation");
        System.out.println("5. Detailed Reservation Information.");
        System.out.println("6. Revenue");
        System.out.println("7. Exit");
        System.out.print("Please enter your selection here: ");

        return scanner.nextLine();
    }

    private void fr1() throws SQLException {
<<<<<<< HEAD
        String sql = "select t.room,popScore,1 as 'NextAvailableCheckIn',\n" +
                "    MostRecentCheckIn,MostRecentCheckOut,LengthOfStay,\n" +
                "    t2.roomName,t2.beds,\n" +
                "    t2.bedType, t2.maxOccupancy,t2.basePrice,t2.decor    \n" +
                "from (    \n" +
                "   select room,    \n" +
                "       round(sum(datediff(checkout, checkin))/180, 2) as popScore    \n" +
                "   from reservations   \n" +
                "   where checkin >= date_add(curdate(), interval -10000 day)    \n" +
                "   group by room   \n" +
                ") t    \n" +
                "inner join (    \n" +
                "   select * from rooms    \n" +
                ") t2    \n" +
                "on t.room = t2.roomId  \n" +
                "inner join (\n" +
                "    select room,checkin MostRecentCheckIn, checkout MostRecentCheckOut,LengthOfStay\n" +
                "    from (\n" +
                "        select *,datediff(res.checkout,res.checkin) LengthOfStay,\n" +
                "            rank() over (partition by r.roomid order by res.checkout desc) ranking\n" +
                "        from rooms r\n" +
                "        inner join reservations res on res.room = r.roomid\n" +
                "        ) t\n" +
                "        where ranking = 1\n" +
                ") t3\n" +
                "on t3.room = t2.roomId\n" +
                "order by popScore desc, room;\n";

        // Step 3: (omitted in this example) Start transaction

        // Step 4: Send SQL statement to DBMS
        try (Statement stmt = conn.createStatement()) {

            // Step 5: Receive results
            ResultSet rs = stmt.executeQuery(sql);
            DBTablePrinter.printResultSet(rs);
=======

        // Step 1: Establish connection to RDBMS
        try (Connection conn = DriverManager.getConnection(System.getenv("JDBC_URL"),
                                                           System.getenv("JDBC_USER"),
                                                           System.getenv("JDBC_PW"))) {
            // Step 2: Construct SQL statement
            String sql =
            "select A.roomcode, A.roomname, A.beds, A.bedtype, A.maxocc, A.baseprice, A.decor,"
            + " A.popScore, B.nextAvailableCheckin, C.latestStay, C.lengthOfStay"
            + " from"
            + " ("
            + " (select roomcode, roomname, beds, bedtype, maxOcc, baseprice, decor,"
            + " round(sum(t.occupiedDays)/180, 2) as popScore"
            + " from ("
            + " (select room, datediff("
            + " if(checkout > curdate(), curdate(), checkout),"
            + " if(checkin < date_add(curdate(), interval -180 day), date_add(curdate(), interval -180 day), checkin)"
            + " ) occupiedDays"
            + " from lab7_reservations"
            + " where checkout > date_add(curdate(), interval -180 day) and checkin < curdate()"
            + " ) t"
            + " join lab7_rooms on t.room = roomcode"
            + " )"
            + " group by t.room"
            + " order by popScore desc) A,"
            + " (select distinct Room, CURRENT_DATE() as nextAvailableCheckin"
            + " from lab7_reservations"
            + " where Room not in ("
            + " select Room"
            + " from lab7_reservations"
            + " where NOW() between Checkin and CheckOut"
            + " )"
            + " union"
            + " select Room, CheckOut"
            + " from ("
            + " select *, RANK() OVER (partition by ROOM order by NextDate asc) as Ranking"
            + " from ("
            + " select *, DATEDIFF(CheckOut, NOW()) as NextDate"
            + " from lab7_reservations as R"
            + " where CODE not in ("
            + " select R.CODE"
            + " from lab7_reservations as R"
            + " JOin lab7_reservations as R1 ON R.Room = R1.Room and R.CheckOut = R1.Checkin"
            + " )"
            + " and Room in ("
            + " select Room"
            + " from lab7_reservations"
            + " where NOW() between Checkin and CheckOut)) as CheckOuts"
            + " where NextDate > 0) as Ranker"
            + " where Ranking = 1) B,"
            + " (select room, checkout as latestStay, datediff(checkout, checkin) as lengthOfStay"
            + " from lab7_reservations"
            + " where (room, checkout) in ("
            + " select room, max(checkout)"
            + " from lab7_reservations"
            + " where checkout < curdate()"
            + " group by room)"
            + " ) C"
            + " )"
            + " where A.roomcode = B.room and A.roomcode = C.room and B.room = C.room;";

            // Step 3: (omitted in this example) Start transaction
            // Step 4: Send SQL statement to DBMS
            try (Statement stmt = conn.createStatement();
                 ResultSet rs = stmt.executeQuery(sql)) {
                // Step 5: Receive results
                DBTablePrinter db = new DBTablePrinter();
                db.printResultSet(rs, rs_width);
            }
            // Step 6: (omitted in this example) Commit or rollback transaction
>>>>>>> 0d9804cc002a5d54f299dfb0c68fac0b86db4afc
        }
        // Step 7: Close connection (handled by try-with-resources syntax)
    }

    private void fr2() throws SQLException {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Please provide your: ");
        System.out.print("First Name: ");
        String firstName = scanner.nextLine();
        System.out.print("Last Name: ");
        String lastName = scanner.nextLine();
        System.out.print("Room Code Desired (or 'ANY' to indicate no preference): ");
        String roomCode = scanner.nextLine();
        System.out.print("Bed Type Desired (or 'ANY' to indicate no preference): ");
        String roomType = scanner.nextLine();
        System.out.print("Check In Date (in the form 'yyyy-mm-dd'): ");
        String checkIn = scanner.nextLine();
        System.out.print("Check Out Date (in the form 'yyyy-mm-dd'): ");
        String checkOut = scanner.nextLine();
        System.out.print("Number of Children: ");
        int numChildren = scanner.nextInt();
        System.out.print("Number of adults: ");
        int numAdults = scanner.nextInt();
        return;

        // Step 6: (omitted in this example) Commit or rollback transaction

    }
}
